// ==UserScript==
// @name               Easy Compare
// @description        Compare images
// @version            0.7.4
// @author             Secant (TYT@NexusHD)
// @license            GPL-3.0-or-later
// @supportURL         zzwu@zju.edu.cn
// @contributionURL    https://i.loli.net/2020/02/28/JPGgHc3UMwXedhv.jpg
// @contributionAmount 10
// @include            *
// @require            https://cdn.staticfile.org/jquery/3.4.1/jquery.min.js
// @require            https://bundle.run/pixelmatch@5.1.0
// @require            https://cdn.staticfile.org/pako/1.0.10/pako.min.js
// @require            https://cdn.staticfile.org/upng-js/2.1.0/UPNG.min.js
// @namespace          https://greasyfork.org/users/152136
// @icon               data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23008000'%3E%3Cpath id='ld' d='M20 6H10c-2.21 0-4 1.79-4 4v28c0 2.21 1.79 4 4 4h10v4h4V2h-4v4zm0 30H10l10-12v12zM38 6H28v4h10v26L28 24v18h10c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4z'/%3E%3C/svg%3E
// @grant              GM_xmlhttpRequest
// @grant              GM_download
// @grant              unsafewindow
// @connect            hdbits.org
// @connect            awesome-hd.me
// @connect            ptpimg.me
// @connect            imgbox.com
// @connect            malzo.com
// @connect            imagebam.com
// @connect            pixhost.to
// @connect            loli.net
// @connect            funkyimg.com
// @connect            ilikeshots.club
// @connect            z4a.net
// @connect            picgd.com
// @connect            tu.totheglory.im
// @connect            tpimg.ccache.org
// @connect            pterclub.com
// @connect            catbox.moe
// @connect            *
// ==/UserScript==
(async function (e, t, a, r, o) { "use strict"; async function n(e, t, a, r) { return new Promise(o => { e.onmessage = (e => { o(e.data.result) }), e.postMessage({ R: t.buffer, G: a.buffer, B: r.buffer }, [t.buffer, a.buffer, r.buffer]) }) } function s(e) { let t = ""; const a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r = e.byteLength, o = r % 3, n = r - o; let s, i, c, l, d; for (let r = 0; r < n; r += 3)d = e[r] << 16 | e[r + 1] << 8 | e[r + 2], s = (16515072 & d) >> 18, i = (258048 & d) >> 12, c = (4032 & d) >> 6, l = 63 & d, t += a[s] + a[i] + a[c] + a[l]; return 1 === o ? (d = e[n], s = (252 & d) >> 2, i = (3 & d) << 4, t += `${a[s]}${a[i]}==`) : 2 === o && (d = e[n] << 8 | e[n + 1], s = (64512 & d) >> 10, i = (1008 & d) >> 4, c = (15 & d) << 2, t += `${a[s]}${a[i]}${a[c]}=`), t } function i(e) { return new Promise(t => { GM_xmlhttpRequest({ url: e, method: "GET", timeout: 6e3, onload: e => { if (200 === e.status) try { const a = m(e.responseText), r = a.find(B.join(","))[0].src; let o = r; for (let e of D) if (o = o.replace(e[0], e[1]), o !== r) break; t(o) } catch (e) { console.warn(e), t(null) } else console.warn(e), t(null) }, ontimeout: e => { console.warn(e), t(null) } }) }) } async function c(e, t) { return new Promise(a => { GM_xmlhttpRequest({ url: e, method: "GET", overrideMimeType: "text/plain; charset=x-user-defined", onprogress: e => { -1 !== e.total ? t(e.loaded / e.total) : t(-e.loaded) }, onload: e => { if (200 === e.status) { const t = e.responseText, n = t.length, i = new Uint8Array(n); for (let e = 0; e < n; e++)i[e] = 255 & t.charCodeAt(e); const c = new Image, l = document.createElement("canvas"), d = l.getContext("2d"); let g = o.createObjectURL(new Blob([i], { type: "image/png" })), m = !0; c.onload = (() => { m && o.revokeObjectURL(g); const [e, t] = [c.width, c.height]; l.width = e, l.height = t, d.drawImage(c, 0, 0, e, t), a({ raw: d.getImageData(0, 0, e, t).data.buffer, width: e, height: t }) }), c.onerror = (() => { o.revokeObjectURL(g), m = !1, g = `data:image/png;base64,${s(i)}`, c.onerror = (() => { const e = r.decode(i), t = r.toRGBA8(e)[0]; a({ raw: t, width: e.width, height: e.height }) }), c.src = g }), c.src = g } else console.warn(e), a(null) }, onerror: e => { console.warn(e), a(null) } }) }) } function l(e, t, a, r, o) { const [n, s, i] = o; for (let o = 0; o < r; ++o)for (let r = 0; r < a; ++r) { let c = 4 * r + o * a * 4; t[c] = n[e[c]], t[c + 1] = s[e[c + 1]], t[c + 2] = i[e[c + 2]], t[c + 3] = e[c + 3] } } async function d(e, t, a) { const r = await c(e, t); if (r) { if (t(null), a instanceof Worker) { const e = a, [t, n, s] = [r.raw, r.width, r.height], i = "" + Date.now(); return e.onmessage = (t => { const a = t.data.key, r = e.keyPool[a]; if (r) { const n = document.createElement("canvas"), [s, i] = [t.data.width, t.data.height];[n.width, n.height] = [s, i]; const c = n.getContext("2d"); c.putImageData(new ImageData(new Uint8ClampedArray(t.data.filter), s, i), 0, 0), n.toBlob(t => { r(o.createObjectURL(t)), delete e.keyPool[a] }, "image/png", 1) } }), e.postMessage({ img: t, width: n, height: s, key: i }, [t]), new Promise(t => { e.keyPool[i] = t }) } { const e = a, [t, n, s] = [new Uint8ClampedArray(r.raw), r.width, r.height], i = document.createElement("canvas");[i.width, i.height] = [n, s]; const c = i.getContext("2d"), d = c.createImageData(n, s); return l(t, d.data, n, s, e), c.putImageData(d, 0, 0), new Promise(e => { i.toBlob(t => { e(o.createObjectURL(t)) }, "image/png", 1) }) } } } async function g(e, t, r, n = { alpha: .5, threshold: .007 }, s = j) { const [i, l] = await Promise.all([c(e, e => r(e, 0)), c(t, e => r(e, 1))]); if (i && l && i.width === l.width && i.height === l.height) { if (r(null, null), s) { const [e, t, a, r] = [i.raw, l.raw, i.width, i.height], c = "" + Date.now(); return s.onmessage = (e => { const t = e.data.key, a = s.keyPool[t]; if (a) { const r = document.createElement("canvas"), [n, i] = [e.data.width, e.data.height];[r.width, r.height] = [n, i]; const c = r.getContext("2d"); c.putImageData(new ImageData(new Uint8ClampedArray(e.data.diff), n, i), 0, 0), r.toBlob(e => { a(o.createObjectURL(e)), delete s.keyPool[t] }, "image/png", 1) } }), s.postMessage({ img1: e, img2: t, width: a, height: r, init: n, key: c }, [e, t]), new Promise(e => { s.keyPool[c] = e }) } { const [e, t, r, s] = [new Uint8ClampedArray(i.raw), new Uint8ClampedArray(l.raw), i.width, i.height], c = document.createElement("canvas");[c.width, c.height] = [r, s]; const d = c.getContext("2d"), g = d.createImageData(r, s); return a(e, t, g.data, r, s, n), d.putImageData(g, 0, 0), new Promise(e => { c.toBlob(t => { e(o.createObjectURL(t)) }, "image/png", 1) }) } } return null } function m(t) { return e(t, document.implementation.createHTMLDocument("virtual")) } function h(e, t, a = 20) { return `data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' height="${a}" width="${t}"><text x="0" y="15" fill="white">${e}</text></svg>`)}` } function f(t, a = "red") { const r = e("<figure/>").css({ width: "fit-content", position: "fixed", top: "50%", left: "50%", margin: "0", "vertical-align": "middle" }), o = e(`<img src="${t}"/>`).css({ display: "none", transform: "translate(-50%, -50%)", opacity: "1", outline: "3px solid " + a, "outline-offset": "2px" }); return r.append(o), o } function p(e) { e.attr({ fill: "#008000" }).css({ cursor: "pointer", opacity: "1" })[0].state = !0 } function y(t, a) { const r = t.find("img:visible").hide()[0]; (r && (a = r.targetImage) || a) && a.easyCompare && void 0 !== a.easyCompare.boxShadow && e(a).css("box-shadow", a.easyCompare.boxShadow) } function u(e, t) { if (e.easyCompare && e.easyCompare.originalImage) { const t = e.easyCompare.originalImage; return t.ready && (t.style.width = `${100 * L}%`), t } { const a = f(h("Loading...", 80))[0]; return a.ready = !1, a.targetImage = e, t.append(a.parentElement), e.easyCompare || (e.easyCompare = {}), e.easyCompare.originalImage = a, e.easyCompare.originalImagePromise = new Promise(t => { let r, o, n = e.src; for (let r of D) if (n = n.replace(r[0], r[1]), n !== e.src) return a.src = n, a.style.width = `${100 * L}%`, a.ready = !0, void t(a); if (o = e.parentElement.href, !(r = o)) return a.src = n, a.style.width = `${100 * L}%`, a.ready = !0, void t(a); for (let e of O) if (r = r.replace(e[0], e[1]), r !== o) break; if (r.match(/\.png$|\.jpe?g$|\.webp|\.gif|\.bmp|\.svg$/)) return a.src = r, a.style.width = `${100 * L}%`, a.ready = !0, void t(a); i(r).then(e => { a.src = e || n, a.style.width = `${100 * L}%`, a.ready = !0, t(a) }) }), a } } function w(e, t, a) { if (e.src === t.src) return u(e); if (e.easyCompare && e.easyCompare[t.src]) { e.easyCompare[t.src].targetImage = e, e.easyCompare[t.src].baseImage = t; const a = e.easyCompare[t.src]; return a.ready && (a.style.width = `${100 * L}%`), a } { const r = f(h("Loading...", 80))[0]; r.ready = !1, r.targetImage = e, r.baseImage = t, r.threshold = -1, r.step = .001, a.append(r.parentElement), e.easyCompare || (e.easyCompare = {}), e.easyCompare[t.src] = r, t.easyCompare || (t.easyCompare = {}), t.easyCompare[e.src] = r; let o = [0, 0]; const n = (e, t) => { null !== e && e >= 0 && null !== t ? (o[t] = e, r.src = h(`Loading ${(50 * (o[0] + o[1])).toFixed(1)}%`, 120)) : r.src = h(e < 0 ? "Loading..." : "Diffing...", 80) }; return u(e, a), u(t, a), Promise.all([e.easyCompare.originalImagePromise, t.easyCompare.originalImagePromise]).then(([{ src: e }, { src: t }]) => g(e, t, n, { alpha: .5, threshold: .007 })).then(e => { null === e ? r.src = h("Sizes Not Match", 120) : (r.onload = (() => { r.style.width = `${100 * L}%`, r.ready = !0 }), r.src = e, r.threshold = .007) }).catch(e => { console.warn(e), r.src = h("Sth. Went Wrong", 120) }), r } } function b(e, t, a) { if (e.easyCompare && e.easyCompare[t]) { const a = e.easyCompare[t]; return a.ready && (a.style.width = `${100 * L}%`), a } { const r = f(h("Loading...", 80))[0]; r.ready = !1, r.targetImage = e, a.append(r.parentElement), e.easyCompare || (e.easyCompare = {}), e.easyCompare[t] = r; const o = e => { r.src = null !== e && e >= 0 ? h(`Loading ${(100 * e).toFixed(1)}%`, 120) : h(e < 0 ? "Loading..." : "Filtering...", 80) }; return u(e, a), e.easyCompare.originalImagePromise.then(e => { S[t](e.src, o).then(e => { r.onload = (() => { r.style.width = `${100 * L}%`, r.ready = !0 }), r.src = e }) }), r } } function k(a, r, n) { t && t.pause(), a.show()[0].state = !0; let s, i = ["red", "blue"], c = 1, l = "none"; r.on("mouseenter.compare", (t, r) => { const o = t.currentTarget; let n; if (clearTimeout(R), y(a), o.easyCompare || (o.easyCompare = {}, o.easyCompare.boxShadow = o.style["box-shadow"]), e(o).css({ "box-shadow": "0px 0px 8px " + i[0] }), (t.shiftKey || r) && s) n = e(w(o, s, a)).css("outline-color", i[0]).show(); else switch (l) { case "none": n = e(u(o, a)).css("outline-color", i[0]).show(); break; default: n = e(b(o, l, a)).css("outline-color", i[0]).show() }i.push(i.shift()) }).on("mouseleave.compare", e => { const t = e.currentTarget; R = setTimeout(() => { y(a, t) }, 200) }), e(document).on("scroll.compare", t => { const o = a.find("img:visible")[0]; if (o) { const t = e(o.targetImage); t.is(":hover") || (y(a, t[0]), r.find("img:hover").trigger("mousenter")) } }).on("keydown.compare", t => { switch (t.preventDefault(), t.stopImmediatePropagation(), t.key) { case "Escape": x(a, r); break; case "Shift": try { const e = r.index(a.find("img:visible")[0].targetImage); s = r[e] } catch (e) { s = void 0, e instanceof TypeError || console.warn(e) } break; case "+": case "=": if (t.ctrlKey) try { L <= .9 ? L += .1 : L = 1; const e = a.find("img:visible")[0]; e.ready && (e.style.width = `${100 * L}%`) } catch (e) { e instanceof TypeError || console.warn(e) } break; case "-": case "_": if (t.ctrlKey) try { L >= .2 ? L -= .1 : L = .1; const e = a.find("img:visible")[0]; e.ready && (e.style.width = `${100 * L}%`) } catch (e) { e instanceof TypeError || console.warn(e) } break; case "O": case "o": if (t.ctrlKey) try { if (1 !== L) { L = 1; const e = a.find("img:visible")[0]; e.ready && (e.style.width = `${100 * L}%`) } } catch (e) { e instanceof TypeError || console.warn(e) } break; case "S": case "s": if (t.ctrlKey) try { const e = a.find("img:visible")[0]; GM_download({ url: e.src, name: "easycompare.png", onerror: t => { if ("Invalid scheme" === t.error) { const t = document.createElement("a"); t.href = e.src, t.download = "easycompare.png", t.click() } } }) } catch (e) { e instanceof TypeError || console.warn(e) } else { l = "solar" === l ? "none" : "solar"; try { const t = a.find("img:visible").hide()[0]; let r; r = e("none" === l ? u(t.targetImage, a) : b(t.targetImage, l, a)), r.css("outline-color", t.style["outline-color"]).show() } catch (e) { e instanceof TypeError || console.warn(e) } } break; case "A": case "a": l = "s2lar" === l ? "none" : "s2lar"; try { const t = a.find("img:visible").hide()[0]; let r; r = e("none" === l ? u(t.targetImage, a) : b(t.targetImage, l, a)), r.css("outline-color", t.style["outline-color"]).show() } catch (e) { e instanceof TypeError || console.warn(e) } break; case "I": case "i": case "ArrowUp": try { const e = a.find("img:visible")[0]; let t = e.threshold; if (void 0 !== t && t >= 0) { const a = t; n.text(`Threshold: ${a.toFixed(4)}`).css("opacity", "1"), t += e.step, t > 1 && (t = 1), e.threshold = -1, g(e.baseImage.easyCompare.originalImage.src, e.targetImage.easyCompare.originalImage.src, (e, t) => { }, { alpha: .5, threshold: t }).then(r => { let o; null === r ? (e.src = h("Sizes Not Match", 120), o = a, setTimeout(() => { e.threshold = a }, 300)) : (e.src = r, o = t, setTimeout(() => { e.threshold = t }, 300)), n.text(`Threshold: ${o.toFixed(4)}`).css("opacity", "1"), setTimeout(() => n.css("opacity", "0"), 300) }) } } catch (e) { e instanceof TypeError || console.warn(e) } break; case "K": case "k": case "ArrowDown": try { const e = a.find("img:visible")[0]; let t = e.threshold; if (void 0 !== t && t >= 0) { const a = t; n.text(`Threshold: ${a.toFixed(4)}`).css("opacity", "1"), t -= e.step, t < 0 && (t = 0), e.threshold = -1, g(e.baseImage.easyCompare.originalImage.src, e.targetImage.easyCompare.originalImage.src, (e, t) => { }, { alpha: .5, threshold: t }).then(r => { let o; null === r ? (e.src = h("Sizes Not Match", 120), o = a, setTimeout(() => { e.threshold = a }, 300)) : (e.src = r, o = t, setTimeout(() => { e.threshold = t }, 300)), n.text(`Threshold: ${o.toFixed(4)}`).css("opacity", "1"), setTimeout(() => n.css("opacity", "0"), 300) }) } } catch (e) { e instanceof TypeError || console.warn(e) } break; case "J": case "j": case "ArrowLeft": try { const e = a.find("img:visible")[0]; switch (e.step) { case 1e-4: e.step = .001; break; case .001: e.step = .01; break; case .01: e.step = .1; break; case .1: e.step = 1 }e.step && (n.text(`Step: ${e.step.toFixed(4)}`).css("opacity", "1"), setTimeout(() => n.css("opacity", "0"), 300)) } catch (e) { e instanceof TypeError || console.warn(e) } break; case "L": case "l": case "ArrowRight": if (t.ctrlKey) { try { y(a, a.find("img:visible")[0].targetImage) } catch (e) { e instanceof TypeError || console.warn(e) } a.find("img").toArray().forEach(e => { const t = e.targetImage; delete t.easyCompare, o.revokeObjectURL(e.src), e.parentElement.remove() }) } else try { const e = a.find("img:visible")[0]; switch (e.step) { case 1: e.step = .1; break; case .1: e.step = .01; break; case .01: e.step = .001; break; case .001: e.step = 1e-4 }e.step && (n.text(`Step: ${e.step.toFixed(4)}`).css("opacity", "1"), setTimeout(() => n.css("opacity", "0"), 300)) } catch (e) { e instanceof TypeError || console.warn(e) } break; case "Q": case "q": a.css("opacity", .5); break; case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "9": c = parseInt(t.key); break; case "0": c = 10; break; case "E": case "e": try { const o = a.find("img:visible")[0].targetImage, n = r.index(o); y(a, o); const s = r[n + c] || r[n]; e(s).trigger("mouseenter", [t.shiftKey]) } catch (e) { e instanceof TypeError || console.warn(e) } break; case "W": case "w": try { const o = a.find("img:visible")[0].targetImage, n = r.index(o); y(a, o); const s = r[n - c] || r[n]; e(s).trigger("mouseenter", [t.shiftKey]) } catch (e) { e instanceof TypeError || console.warn(e) } }return !1 }).on("keyup.compare", e => { switch (e.preventDefault(), e.stopImmediatePropagation(), e.key) { case "Q": case "q": a.css("opacity", "") }return !1 }) } function x(a, r) { t && t.unpause(), y(a), a.hide()[0].state = !1, r.off("mouseenter.compare").off("mouseleave.compare"), e(document).off("scroll.compare").off("keydown.compare") } const [v, C, I] = [new Uint8Array([0, 2, 9, 21, 37, 56, 78, 101, 125, 149, 172, 193, 212, 228, 241, 250, 254, 255, 252, 246, 235, 222, 206, 188, 168, 148, 127, 106, 86, 67, 49, 34, 22, 12, 5, 1, 0, 1, 6, 14, 24, 36, 50, 66, 82, 100, 118, 136, 154, 171, 188, 203, 216, 228, 238, 245, 251, 254, 255, 254, 251, 246, 239, 230, 219, 207, 194, 180, 165, 149, 134, 118, 103, 88, 73, 60, 48, 36, 26, 18, 11, 6, 2, 0, 0, 1, 4, 8, 14, 22, 30, 40, 51, 63, 75, 88, 102, 115, 129, 143, 156, 170, 182, 194, 205, 216, 225, 233, 240, 246, 250, 253, 255, 255, 254, 252, 248, 243, 237, 230, 221, 212, 201, 190, 179, 166, 154, 141, 128, 114, 101, 89, 76, 65, 54, 43, 34, 25, 18, 12, 7, 3, 1, 0, 0, 2, 5, 9, 15, 22, 30, 39, 50, 61, 73, 85, 99, 112, 126, 140, 153, 167, 180, 192, 204, 215, 225, 233, 241, 247, 251, 254, 255, 255, 253, 249, 244, 237, 229, 219, 207, 195, 182, 167, 152, 137, 121, 106, 90, 75, 61, 48, 36, 25, 16, 9, 4, 1, 0, 1, 4, 10, 17, 27, 39, 52, 67, 84, 101, 119, 137, 155, 173, 189, 205, 219, 231, 241, 249, 254, 255, 254, 250, 243, 233, 221, 206, 188, 169, 149, 128, 107, 87, 67, 49, 33, 20, 9, 3, 0, 1, 5, 14, 27, 43, 62, 83, 106, 130, 154, 177, 199, 218, 234, 246, 253]), new Uint8Array([60, 39, 22, 10, 2, 0, 2, 9, 21, 37, 56, 78, 101, 125, 149, 172, 193, 212, 228, 241, 250, 254, 255, 252, 246, 235, 222, 206, 188, 168, 148, 127, 106, 86, 67, 49, 34, 22, 12, 5, 1, 0, 1, 6, 14, 24, 36, 50, 66, 82, 100, 118, 136, 154, 171, 188, 203, 216, 228, 238, 245, 251, 254, 255, 254, 251, 246, 239, 230, 219, 207, 194, 180, 165, 149, 134, 118, 103, 88, 73, 60, 48, 36, 26, 18, 11, 6, 2, 0, 0, 1, 4, 8, 14, 22, 30, 40, 51, 63, 75, 88, 102, 115, 129, 143, 156, 170, 182, 194, 205, 216, 225, 233, 240, 246, 250, 253, 255, 255, 254, 252, 248, 243, 237, 230, 221, 212, 201, 190, 179, 166, 154, 141, 128, 114, 101, 89, 76, 65, 54, 43, 34, 25, 18, 12, 7, 3, 1, 0, 0, 2, 5, 9, 15, 22, 30, 39, 50, 61, 73, 85, 99, 112, 126, 140, 153, 167, 180, 192, 204, 215, 225, 233, 241, 247, 251, 254, 255, 255, 253, 249, 244, 237, 229, 219, 207, 195, 182, 167, 152, 137, 121, 106, 90, 75, 61, 48, 36, 25, 16, 9, 4, 1, 0, 1, 4, 10, 17, 27, 39, 52, 67, 84, 101, 119, 137, 155, 173, 189, 205, 219, 231, 241, 249, 254, 255, 254, 250, 243, 233, 221, 206, 188, 169, 149, 128, 107, 87, 67, 49, 33, 20, 9, 3, 0, 1, 5, 14, 27, 43, 62, 83, 106, 130, 154, 177]), new Uint8Array([56, 78, 101, 125, 149, 172, 193, 212, 228, 241, 250, 254, 255, 252, 246, 235, 222, 206, 188, 168, 148, 127, 106, 86, 67, 49, 34, 22, 12, 5, 1, 0, 1, 6, 14, 24, 36, 50, 66, 82, 100, 118, 136, 154, 171, 188, 203, 216, 228, 238, 245, 251, 254, 255, 254, 251, 246, 239, 230, 219, 207, 194, 180, 165, 149, 134, 118, 103, 88, 73, 60, 48, 36, 26, 18, 11, 6, 2, 0, 0, 1, 4, 8, 14, 22, 30, 40, 51, 63, 75, 88, 102, 115, 129, 143, 156, 170, 182, 194, 205, 216, 225, 233, 240, 246, 250, 253, 255, 255, 254, 252, 248, 243, 237, 230, 221, 212, 201, 190, 179, 166, 154, 141, 128, 114, 101, 89, 76, 65, 54, 43, 34, 25, 18, 12, 7, 3, 1, 0, 0, 2, 5, 9, 15, 22, 30, 39, 50, 61, 73, 85, 99, 112, 126, 140, 153, 167, 180, 192, 204, 215, 225, 233, 241, 247, 251, 254, 255, 255, 253, 249, 244, 237, 229, 219, 207, 195, 182, 167, 152, 137, 121, 106, 90, 75, 61, 48, 36, 25, 16, 9, 4, 1, 0, 1, 4, 10, 17, 27, 39, 52, 67, 84, 101, 119, 137, 155, 173, 189, 205, 219, 231, 241, 249, 254, 255, 254, 250, 243, 233, 221, 206, 188, 169, 149, 128, 107, 87, 67, 49, 33, 20, 9, 3, 0, 1, 5, 14, 27, 43, 62, 83, 106, 130, 154, 177, 199, 218, 234, 246, 253, 255, 253, 245, 233, 216])], [$, U, T] = [new Uint8Array([0, 9, 149, 222, 1, 251, 26, 170, 166, 22, 255, 25, 173, 169, 5, 177, 246, 253, 218, 83, 33, 250, 67, 90, 241, 15, 141, 225, 4, 180, 171, 5, 206, 212, 56, 2, 0, 2, 78, 241, 168, 0, 188, 194, 2, 156, 237, 34, 73, 254, 90, 27, 231, 169, 3, 62, 199, 246, 253, 246, 199, 83, 0, 128, 254, 84, 16, 207, 215, 22, 54, 237, 194, 14, 88, 251, 154, 0, 127, 252, 193, 78, 9, 0, 0, 2, 37, 125, 241, 206, 49, 24, 203, 230, 60, 14, 182, 252, 114, 0, 99, 251, 182, 16, 52, 231, 221, 67, 1, 83, 177, 234, 253, 253, 246, 218, 130, 27, 9, 128, 254, 173, 10, 61, 219, 225, 73, 3, 128, 254, 170, 22, 48, 207, 238, 66, 5, 148, 252, 212, 101, 21, 2, 0, 0, 9, 56, 149, 250, 206, 49, 14, 188, 246, 88, 1, 143, 255, 154, 7, 61, 233, 207, 36, 39, 219, 221, 67, 5, 106, 199, 246, 253, 253, 234, 154, 43, 9, 149, 254, 84, 9, 182, 233, 50, 25, 212, 225, 30, 60, 246, 154, 0, 148, 254, 149, 37, 2, 0, 2, 37, 172, 255, 106, 14, 216, 180, 0, 170, 230, 25, 85, 255, 75, 52, 254, 107, 5, 154, 246, 253, 246, 177, 27, 67, 254, 67, 90, 247, 22, 128, 233, 8, 180, 171, 12, 235, 149, 21, 0, 2, 56, 241, 106, 66, 239, 0, 225, 101, 73, 237, 1, 249, 49, 83, 234]), new Uint8Array([245, 5, 255, 56, 22, 60, 22, 37, 254, 22, 203, 88, 102, 221, 0, 233, 90, 84, 243, 20, 62, 154, 177, 106, 5, 128, 241, 10, 167, 192, 0, 201, 170, 6, 239, 82, 67, 255, 101, 0, 39, 60, 39, 2, 149, 246, 34, 100, 246, 36, 88, 255, 89, 22, 225, 167, 0, 155, 243, 67, 1, 83, 154, 177, 154, 83, 5, 49, 221, 205, 17, 75, 249, 153, 0, 114, 255, 129, 0, 165, 245, 66, 34, 222, 228, 78, 2, 22, 60, 60, 39, 2, 21, 149, 255, 148, 1, 118, 255, 134, 0, 115, 250, 179, 18, 39, 215, 237, 75, 4, 155, 255, 169, 33, 5, 62, 130, 177, 177, 154, 106, 27, 3, 87, 221, 231, 84, 4, 137, 253, 167, 22, 34, 190, 246, 102, 0, 118, 251, 171, 6, 67, 235, 228, 101, 9, 10, 39, 60, 60, 22, 0, 37, 172, 255, 148, 5, 100, 251, 165, 11, 75, 233, 212, 43, 15, 180, 249, 106, 1, 137, 255, 169, 20, 14, 83, 154, 177, 177, 130, 43, 0, 87, 233, 205, 17, 61, 237, 180, 9, 76, 248, 170, 1, 134, 251, 66, 34, 235, 193, 37, 2, 39, 60, 39, 2, 56, 212, 206, 5, 136, 239, 18, 102, 254, 76, 30, 241, 152, 4, 205, 206, 20, 43, 154, 177, 154, 62, 3, 169, 231, 10, 167, 204, 0, 190, 182, 2, 239, 82, 86, 250, 37, 10, 60, 39, 0, 149, 206, 6, 254, 26, 170, 166, 22, 255]), new Uint8Array([246, 0, 225, 101, 73, 237, 0, 241, 67, 83, 253, 233, 216, 253, 199, 1, 188, 155, 25, 255, 61, 76, 253, 40, 103, 238, 14, 106, 255, 172, 78, 56, 78, 193, 246, 67, 36, 245, 118, 8, 216, 190, 3, 140, 244, 25, 101, 254, 67, 27, 177, 255, 233, 216, 233, 255, 199, 43, 33, 233, 173, 1, 137, 251, 73, 12, 190, 240, 63, 26, 207, 228, 36, 34, 188, 254, 193, 101, 56, 56, 78, 149, 228, 246, 106, 1, 100, 251, 165, 11, 63, 233, 221, 54, 15, 167, 249, 106, 1, 137, 254, 128, 3, 62, 199, 253, 245, 216, 216, 233, 253, 234, 130, 14, 33, 206, 241, 67, 9, 152, 254, 140, 5, 65, 230, 225, 75, 6, 134, 254, 154, 14, 49, 188, 255, 212, 125, 78, 56, 56, 101, 172, 241, 235, 106, 1, 82, 245, 194, 26, 30, 205, 243, 89, 2, 126, 255, 137, 1, 119, 255, 128, 3, 83, 218, 255, 233, 216, 216, 245, 246, 154, 14, 49, 233, 173, 4, 106, 255, 112, 1, 154, 253, 88, 11, 194, 228, 36, 49, 222, 241, 149, 78, 56, 78, 149, 250, 206, 22, 82, 254, 103, 22, 225, 179, 1, 153, 229, 16, 137, 233, 20, 83, 246, 233, 216, 233, 253, 130, 3, 206, 155, 25, 253, 73, 65, 255, 51, 103, 238, 6, 148, 241, 125, 56, 78, 172, 246, 22, 154, 180, 14, 253, 43, 140, 182, 39, 243, 0, 199, 245, 216, 245, 177, 3, 254])]; let j, P, A; const E = 'const defaultOptions={threshold:.1,includeAA:!1,alpha:.1,aaColor:[255,255,0],diffColor:[255,0,0],diffMask:!1};function pixelmatch(a,b,c,d,e,f){if(!isPixelData(a)||!isPixelData(b)||c&&!isPixelData(c))throw new Error("Image data: Uint8Array, Uint8ClampedArray or Buffer expected.");if(a.length!==b.length||c&&c.length!==a.length)throw new Error("Image sizes do not match.");if(a.length!==4*(d*e))throw new Error("Image data size does not match width/height.");f=Object.assign({},defaultOptions,f);const g=d*e,h=new Uint32Array(a.buffer,a.byteOffset,g),j=new Uint32Array(b.buffer,b.byteOffset,g);let k=!0;for(let l=0;l<g;l++)if(h[l]!==j[l]){k=!1;break}if(k){if(c&&!f.diffMask)for(let b=0;b<g;b++)drawGrayPixel(a,4*b,f.alpha,c);return 0}const l=35215*f.threshold*f.threshold;let m=0;const[n,o,p]=f.aaColor,[q,r,s]=f.diffColor;for(let g=0;g<e;g++)for(let h=0;h<d;h++){const i=4*(g*d+h),j=colorDelta(a,b,i,i);j>l?!f.includeAA&&(antialiased(a,h,g,d,e,b)||antialiased(b,h,g,d,e,a))?c&&!f.diffMask&&drawPixel(c,i,n,o,p):(c&&drawPixel(c,i,q,r,s),m++):c&&!f.diffMask&&drawGrayPixel(a,i,f.alpha,c)}return m}function isPixelData(a){return ArrayBuffer.isView(a)&&1===a.constructor.BYTES_PER_ELEMENT}function antialiased(a,b,c,d,e,f){const g=Math.max(b-1,0),h=Math.max(c-1,0),i=Math.min(b+1,d-1),j=Math.min(c+1,e-1);let k,l,m,n,o=b===g||b===i||c===h||c===j?1:0,p=0,q=0;for(let r=g;r<=i;r++)for(let e=h;e<=j;e++){if(r===b&&e===c)continue;const f=colorDelta(a,a,4*(c*d+b),4*(e*d+r),!0);if(0!==f)f<p?(p=f,k=r,l=e):f>q&&(q=f,m=r,n=e);else if(o++,2<o)return!1}return 0!==p&&0!==q&&(hasManySiblings(a,k,l,d,e)&&hasManySiblings(f,k,l,d,e)||hasManySiblings(a,m,n,d,e)&&hasManySiblings(f,m,n,d,e))}function hasManySiblings(a,b,c,d,e){const f=Math.max(b-1,0),g=Math.max(c-1,0),h=Math.min(b+1,d-1),i=Math.min(c+1,e-1),j=4*(c*d+b);let k=b===f||b===h||c===g||c===i?1:0;for(let l=f;l<=h;l++)for(let e=g;e<=i;e++){if(l===b&&e===c)continue;const f=4*(e*d+l);if(a[j]===a[f]&&a[j+1]===a[f+1]&&a[j+2]===a[f+2]&&a[j+3]===a[f+3]&&k++,2<k)return!0}return!1}function colorDelta(a,b,c,d,e){let f=a[c+0],g=a[c+1],h=a[c+2],j=a[c+3],k=b[d+0],l=b[d+1],m=b[d+2],n=b[d+3];if(j===n&&f===k&&g===l&&h===m)return 0;255>j&&(j/=255,f=blend(f,j),g=blend(g,j),h=blend(h,j)),255>n&&(n/=255,k=blend(k,n),l=blend(l,n),m=blend(m,n));const o=rgb2y(f,g,h)-rgb2y(k,l,m);if(e)return o;const p=rgb2i(f,g,h)-rgb2i(k,l,m),i=rgb2q(f,g,h)-rgb2q(k,l,m);return .5053*o*o+.299*p*p+.1957*i*i}function rgb2y(a,c,d){return .29889531*a+.58662247*c+.11448223*d}function rgb2i(a,c,d){return .59597799*a-.2741761*c-.32180189*d}function rgb2q(a,c,d){return .21147017*a-.52261711*c+.31114694*d}function blend(b,c){return 255+(b-255)*c}function drawPixel(a,c,d,e,f){a[c+0]=d,a[c+1]=e,a[c+2]=f,a[c+3]=255}function drawGrayPixel(a,c,d,e){const f=a[c+0],h=a[c+1],g=a[c+2],b=blend(rgb2y(f,h,g),d*a[c+3]/255);drawPixel(e,c,b,b,b)}self.onmessage=a=>{img1=new Uint8ClampedArray(a.data.img1),img2=new Uint8ClampedArray(a.data.img2),diff=new Uint8ClampedArray(img1),width=a.data.width,height=a.data.height,init=a.data.init,key=a.data.key;try{pixelmatch(img1,img2,diff,width,height,init),self.postMessage({diff:diff.buffer,width:width,height:height,key:key},[diff.buffer])}catch(a){console.warn(a),self.postMessage({diff:null,key:key})}};', M = "let R,G,B;self.onmessage=(e=>{const a=e.data.key;if(e.data.R&&e.data.G&&e.data.B)R=new Uint8ClampedArray(e.data.R),G=new Uint8ClampedArray(e.data.G),B=new Uint8ClampedArray(e.data.B),self.postMessage({result:!0});else{const t=new Uint8ClampedArray(e.data.img),l=new Uint8ClampedArray(t),s=e.data.width,r=e.data.height;try{for(let e=0;e<r;++e)for(let a=0;a<s;++a){let r=4*a+e*s*4;l[r]=R[t[r]],l[r+1]=G[t[r+1]],l[r+2]=B[t[r+2]],l[r+3]=t[r+3]}self.postMessage({filter:l.buffer,width:s,height:r,key:a},[l.buffer])}catch(e){console.warn(e),self.postMessage({filter:null,key:a})}}});"; try { const e = new Blob([E], { type: "application/javascript" }); j = new Worker(o.createObjectURL(e)), j.keyPool = {}, o.revokeObjectURL(e); const t = new Blob([M], { type: "application/javascript" }), a = o.createObjectURL(t); P = new Worker(a), P.keyPool = {}; const r = n(P, v, C, I); A = new Worker(a), A.keyPool = {}; const s = n(A, $, U, T); o.revokeObjectURL(a), await r, await s } catch (e) { try { const e = `data:application/javascript,${encodeURIComponent(E)}`; j = new Worker(e), j.keyPool = {}; const t = `data:application/javascript,${encodeURIComponent(M)}`; P = new Worker(t), P.keyPool = {}; const a = n(P, v, C, I); A = new Worker(t), A.keyPool = {}; const r = n(A, $, U, T); await a, await r } catch (e) { j = null, P = null } } if (t) { let e = t.prototype || t; const a = e.stopCallback; e.stopCallback = function (e, t, r) { var o = this; return !!o.paused || a.call(o, e, t, r) }, e.pause = function () { var e = this; e.paused = !0 }, e.unpause = function () { var e = this; e.paused = !1 } } let R, L = 1; const D = [[/\.thumb\.jpe?g$/, ""], [/\.md\.png$/, ".png"], [/\.th\.png$/, ".png"], [/_thumb\.png$/, ".png"], [/img\.awesome\-hd\.me\/t(\/\d+)?\//, "img.awesome-hd.me/images/"], [/thumbs((?:\d+)?\.imgbox\.com\/.+_)t\.png$/, "images$1o.png"], [/t((?:\d+)?\.pixhost\.to\/)thumbs\//, "img$1images/"], [/t(\.hdbits\.org\/.+)\.jpg$/, "i$1.png"], [/^.*?imagecache\.php\?url=(https?)%3A%2F%2Fthumbs(\d+)?\.imgbox\.com%2F(\w+)%2F(\w+)%2F(\w+)_t\.png/, "$1://images$2.imgbox.com/$3/$4/$5_o.png"]], O = [[/^https?:\/\/anonym\.to\/\?(.*)$/, (e, t) => decodeURIComponent(t)], [/^https?:\/\/www\.dereferer\.org\/\?(.*)$/, (e, t) => decodeURIComponent(t)], [/^(?:https?:\/\/pterclub\.com)?\/link\.php\?sign=.+?&target=(.*)$/, (e, t) => decodeURIComponent(t.replace(/\+/g, " ")).replace(/ /g, "%20")], [/^.*?imagecache\.php\?url=(.*)$/, (e, t) => decodeURIComponent(t.replace(/\+/g, " ")).replace(/ /g, "%20")]], B = ["#image-viewer-container>img", ".image-container img", "div.img.big>img", "img.mainimage", "img#img"], S = { solar: (e, t) => d(e, t, P || [v, C, I]), s2lar: (e, t) => d(e, t, A || [$, U, T]) }, G = e("<div/>").css({ position: "fixed", top: 0, right: 0, bottom: 0, left: 0, "z-index": 2147483646, "background-color": "rgba(0, 0, 0, 0.75)", "pointer-events": "none", display: "none" }), F = e("<div>").css({ top: "50%", left: "50%", "z-index": 2147483647, position: "fixed", transform: "translate(-50%, -50%)", opacity: "0", "vertical-align": "middle", "pointer-events": "none", transition: "all 0.1s", "font-size": "500%", color: "yellow", "font-weight": "bold" }); G.append(F); const W = e('<svg xmlns="http://www.w3.org/2000/svg">\n<path id="ld" d="M20 6H10c-2.21 0-4 1.79-4 4v28c0 2.21 1.79 4 4 4h10v4h4V2h-4v4zm0 30H10l10-12v12zM38 6H28v4h10v26L28 24v18h10c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4z"/>\n</svg>').attr({ width: "30", height: "30", viewBox: "0 0 48 48", stroke: "white", "stroke-width": "5px", fill: "gray" }).css({ position: "fixed", top: "15px", right: "15px", "z-index": 2147483647, "paint-order": "stroke", opacity: 0, transition: "all 0.2s", cursor: "auto" }).on("mouseenter", t => { e(t.currentTarget).attr({ fill: "gray" }).css({ opacity: .2 }), R = setTimeout(() => p(e(t.currentTarget)), G[0].state ? 0 : 1e3) }).on("mouseleave", t => { clearTimeout(R), e(t.currentTarget).attr({ fill: "gray" }).css({ cursor: "auto", opacity: 0 })[0].state = !1 }).click(t => { if (t.currentTarget.state) switch (G[0].state) { case !1: k(G, e("img:visible:not(.easy-compare-image)"), F); break; case !0: x(G, e("img:visible:not(.easy-compare-image)")) } else { let e = t.clientX, a = t.clientY; const r = document.elementsFromPoint(e, a).find(e => !["svg", "path"].includes(e.tagName)); r.click() } }).mousedown(t => { t.currentTarget.state && e(t.currentTarget).attr({ fill: "#006000" }) }).mouseup(t => { t.currentTarget.state && e(t.currentTarget).attr({ fill: "#008000" }) }); G[0].state = !1, W[0].state = !1, e("body").append(W).append(G) })(window.$.noConflict(!0), unsafeWindow.Mousetrap, window.pixelmatch, window.UPNG, unsafeWindow.URL.createObjectURL ? unsafeWindow.URL : unsafeWindow.webkitURL);